@using Microsoft.AspNetCore.Components.Web
@using RateMyProfessors.Models
@using RateMyProfessors.Services
@inject JsonFileProfessorService ProfessorService

<div class="card-columns">
    @foreach (var professor in ProfessorService.GetProfessors())
    {
        <div class="card">
            <div class="card-photo" style="background-image: url('@professor.Photo');"></div>
            <div class="card-body">
                <h5 class="card-title">@professor.Name</h5>
                <h6 class="card-title">@professor.Position</h6>
            </div>
            <div class="card-footer">
                <small class="text-muted">
                    <button @onclick="(e => SelectProfessor(professor.Id))"
                        data-bs-toggle="modal" data-bs-target="#professorModal" data-bs-dismiss="modal" class="btn btn-primary">
                        More Details
                    </button>
                </small>
            </div>
        </div>
    }
</div>


<div class="modal fade" id="professorModal" tabindex="-1" role="dialog" aria-labelledby="professorName" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        @if (selectedProfessor != null)
        {
            <div class="modal-content" style="overflow-y:scroll; padding:5px; height:300px;">
                <div class="modal-header">
                    <h5 class="modal-name" id="professorName">@selectedProfessor.Name</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-photo" style="background-image: url('@selectedProfessor.Photo');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProfessor.Position</p>
                            @if (selectedProfessor.Comments == null)
                            {
                                <span>Be the first to comment!</span>
                            }
                            else
                            {
                                @foreach (var comment in selectedProfessor.Comments)
                                {
                                    <span class="container-fluid" >@comment</span>

                                }
                            }
                         
                            <form @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                <label>Add Your Comment:</label>
                                <textarea rows="3" class="w-100" id="commentBox" @bind="commentBox"></textarea>
                                <button class="btn btn-primary" @onclick="(e => SubmitComment())">Add</button>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    { 
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            
            </div>
        }
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code 
{
    Professor? selectedProfessor;
    string? selectedProfessorId;

    void SelectProfessor(string professorId)
    {
        selectedProfessorId = professorId;
        selectedProfessor = ProfessorService.GetProfessors().First(x => x.Id == professorId);
        GetCurrentRating();
    }

    double currentRating = 0;
    int voteCount = 0;
    string? voteLabel;
    string? commentBox;

    void GetCurrentRating()
    {
        if (selectedProfessor?.Ratings == null) 
        {
            currentRating = 0;
            voteCount = 0;
        }
        else 
        {
            voteCount = selectedProfessor.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProfessor.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProfessor?.Id}: {currentRating}");
    }

    void SubmitRating (int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProfessor?.Id}: {rating}");
        if (selectedProfessorId == null)
            return;
        ProfessorService.AddRating(selectedProfessorId, rating);
        SelectProfessor(selectedProfessorId);
    }

    void SubmitComment ()
    {
     
        System.Console.WriteLine($"Comment received for {selectedProfessor?.Id}: {commentBox}");
        if (selectedProfessorId == null)
            return;
        ProfessorService.AddComment(selectedProfessorId, commentBox);
        SelectProfessor(selectedProfessorId);
        commentBox = "";
        
    }
}
